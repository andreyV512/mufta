#pragma hdrstop
#include "SignalList.h"
#include "TProtocol.h"
#include "uFunctions.h"
// #include "PA.h"
#pragma package(smart_init)

SignalList::SignalList(void) {
	cs = new TCriticalSection();
	// period = PA("Defect.PCIE1730.SignalListTimeout").Int();
	period = SqlDBModule->GetIntFieldSQL("PCIE1730Params", "SignalListTimeout",
		"rec_id=1");
	// int dev_num = PA("Defect.PCIE1730.Devnum").Int();
	int dev_num = SqlDBModule->GetIntFieldSQL("PCIE1730Params", "devnum",
		"rec_id=1");
	// PA pa("Defect.PCIE1730.Signals");
	// int Count = pa.GetCount();
	// вычитаем параметры сигналов
	SqlDBModule->ADOQueryDB->Close();
	AnsiString sql =
		"SELECT rec_id,SignalListTimeout,Devnum,fName,fHint,fInput,fDigital";
	sql += ",(CASE fDigital WHEN 1 THEN fPosition+16  ELSE fPosition+0 END) as fPosition ";
	sql += " FROM PCIE1730Params order by Devnum,fPosition";
	SqlDBModule->ADOQueryDB->SQL->Text = sql;
	SqlDBModule->ADOQueryDB->Open();
	while (!SqlDBModule->ADOQueryDB->Eof) {
		AnsiString n = SqlDBModule->ADOQueryDB->FieldByName("fName")->AsString;
		//AnsiString h = SqlDBModule->ADOQueryDB->FieldByName("fHint")->AsString;
		bool in = (bool)SqlDBModule->ADOQueryDB->FieldByName("fInput")->AsInteger;
		//bool d = (bool)SqlDBModule->ADOQueryDB->FieldByName("fDigital")->AsInteger;
		int p = SqlDBModule->ADOQueryDB->FieldByName("fPosition")->AsInteger;
		// (AnsiString _name, bool _in, int _index, tagOnSet _OnSet,TCriticalSection* _cs, tagOnWait _OnWait
		// CSignal(AnsiString _name, bool _in, int _index, tagOnSet _OnSet,CriticalSection* _cs, tagOnWait _OnWait
		singList.Add(new CSignal(n, in, p, WriteSignals, cs, Wait));
		SqlDBModule->ADOQueryDB->Next();
	}
	//--------------
	// for (int i = 0; i < Count; i++)
	// {
	// PA pi = pa[i];
	// S.Add(new CSignal(pi.Item("Name").String(),
	// pi.Item("Hint").String(),
	// 0,
	// pi.Item("Input").Bool(),
	// pi.Item("Digital").Bool(),
	// pi.Item("Digital").Bool() ? 16 : 0 + pi.Item("Position").Int(),
	// WriteSignals, cs, Wait));
	// // AnsiString a = _section;
	// // a += "[";
	// // a += Key;
	// // a += "] ";
	// // a += _dev;
	// // if (_in)
	// // a += "IN";
	// // else
	// // a += "OUT";
	// // a += ": ";
	// // a += MapKey;
	// // TPr::pr(a);

}
#ifdef A1730_DAQNaviR
dev0 = new A1730_DAQNavi(dev_num);
#endif
#ifdef A1730_BioDAQR
dev0 = new A1730_BioDAQ(dev_num);
#endif
#ifdef A1730_virtualR
dev0 = new A1730_virtual(dev_num);
#endif
if (PA("Defect.PCIE1730_1").Exist()) {
	dev_num = PA("Defect.PCIE1730_1.Devnum").Int();
	PA pa("Defect.PCIE1730.Signals");
	int Count = pa.GetCount();
	for (int i = 0; i < Count; i++) {
		PA pi = pa[i];
		S.Add(new CSignal(pi.Item("Name").String(), pi.Item("Hint").String(), 1,
			pi.Item("Input").Bool(), pi.Item("Digital").Bool(),
			pi.Item("Digital").Bool() ? 16 : 0 + pi.Item("Position").Int(),
			WriteSignals, cs, Wait));
		// AnsiString a = _section;
		// a += "[";
		// a += Key;
		// a += "] ";
		// a += _dev;
		// if (_in)
		// a += "IN";
		// else
		// a += "OUT";
		// a += ": ";
		// a += MapKey;
		// TPr::pr(a);

	}
#ifdef A1730_DAQNaviR
	dev1 = new A1730_DAQNavi(dev_num);
#endif
#ifdef A1730_BioDAQR
	dev1 = new A1730_BioDAQ(dev_num);
#endif
#ifdef A1730_virtualR
	dev1 = new A1730_virtual(dev_num);
#endif
}
else
	dev1 = NULL;
IsAlarm = false;
wasAlarm = false;
blockDrop = false;
AlarmList = new TStringList();
last_write = 0;
}

__fastcall SignalList::~SignalList(void) {
Terminate();
WaitFor();
delete dev0;
if (dev1 != NULL)
	delete dev1;
delete cs;
delete AlarmList;
}

void SignalList::FlushSignals(DWORD _buf0, DWORD _buf1, DWORD _tick) {
for (int i = 0; i < S.Count(); i++) {
	CSignal* p = S[i];
	if (!p->in)
		continue;
	bool value;
	if (p->dev == 0)
		value = (_buf0 & (((DWORD)1) << p->index)) != 0;
	else
		value = (_buf1 & (((DWORD)1) << p->index)) != 0;
	p->value_prev = p->value;
	if (value != p->value) {
		p->value = value;
		p->last_changed = _tick;
		// AnsiString a=p->name;
		// if(p->value)
		// a+="=true";
		// else
		// a+="=false";
		// TPr::pr(a);
	}
}
}

void _fastcall SignalList::Execute() {
while (true) {
	if (Terminated)
		break;
	cs->Enter(); {
		DWORD tick = GetTickCount();
		DWORD v0 = dev0->Read();
		DWORD v1 = 0;
		if (dev1 != NULL)
			v1 = dev1->Read();
		FlushSignals(v0, v1, tick);
		if (IsAlarm) {
			if (!wasAlarm) {
				if (CheckAlarm())
					LatchesTerminate0();
			}
		}
		CheckWait(tick);
		if (!blockDrop)
			Drop(tick);
		Save(v0, last_write);
		Catch();
	} cs->Leave();
	Sleep(period);
	if (Terminated)
		break;
}
}

bool SignalList::Wait(bool _value, CSignal* _signal, DWORD _tm) {
TEvent* event = new TEvent(true);
Latch* lp = new Latch(_value, _signal, event);
cs->Enter(); {
	L.Add(lp);
} cs->Leave();
bool ret = event->WaitFor(_tm) == wrSignaled;
delete event;
cs->Enter(); {
	if (lp->terminate)
		ret = false;
	L.Remove(lp);
} cs->Leave();
return (ret);
}

void SignalList::WriteSignals(void) {
DWORD buf = dev0->ReadOut();
CSignal* p;
for (int i = 0; i < S.Count(); i++) {
	p = S[i];
	if (p->in)
		continue;
	if (p->dev != 0)
		continue;
	int idx = p->index;
	if (p->value)
		buf |= ((DWORD)1) << p->index;
	else
		buf &= ~(((DWORD)1) << p->index);
}
dev0->Write(buf);
last_write = buf;
if (dev1 != NULL) {
	buf = dev1->ReadOut();
	for (int i = 0; i < S.Count(); i++) {
		p = S[i];
		if (p->in)
			continue;
		if (p->dev != 1)
			continue;
		if (p->value)
			buf |= ((DWORD)1) << p->index;
		else
			buf &= ~(((DWORD)1) << p->index);
	}
	dev1->Write(buf);
}
}

CSignal* SignalList::Find(AnsiString _name, bool _in) {
for (int i = 0; i < S.Count(); i++) {
	if (S[i]->name == _name && S[i]->in == _in)
		return (S[i]);
}
AnsiString a = "Signals::Find: сигнал ";
a += _name;
a += " не найден";
FATAL(a);
return (NULL);
}

void SignalList::SetPeriod(int _period) {
cs->Enter(); {
	period = _period;
} cs->Leave();
}

bool SignalList::CheckAlarm(void) {
return (false);
}

void SignalList::LatchesTerminate0(void) {
for (int i = 0; i < L.Count(); i++) {
	Latch* lp = L[i];
	lp->terminate = true;
	lp->event->SetEvent();
}
}

void SignalList::CheckWait(DWORD _tick) {
Latch* lp;
for (int i = 0; i < L.Count(); i++) {
	Latch* lp = L[i];
	if (lp->signal->value == lp->value)
		lp->event->SetEvent();
}
}

void SignalList::LatchesTerminate(void) {
cs->Enter(); {
	LatchesTerminate0();
} cs->Leave();
}

void SignalList::SetAlarm0(bool _on) {
cs->Enter(); {
	IsAlarm = _on;
	wasAlarm = false;
	AlarmList->Clear();
} cs->Leave();
}

bool SignalList::WasAlarm(void) {
bool ret;
cs->Enter(); {
	ret = wasAlarm;
} cs->Leave();
return (ret);
}

void SignalList::GetAlarmList(TStringList* _alarmList) {
cs->Enter(); {
	_alarmList->Clear();
	for (int i = 0; i < AlarmList->Count; i++)
		_alarmList->Add(AlarmList->Strings[i]);
} cs->Leave();
}

void SignalList::prAlarm(void) {
for (int i = 0; i < AlarmList->Count; i++)
	pr(AlarmList->Strings[i]);
}

void SignalList::pr(AnsiString _msg) {
TPr::pr(_msg);
}

void SignalList::BlockDrop(bool _val) {
cs->Enter(); {
	blockDrop = _val;
} cs->Leave();
}

void SignalList::ResetSignals(void) {
Terminate();
dev0->Write(0);
if (dev1 != NULL)
	dev1->Write(0);
}

void SignalList::Save(DWORD _in, DWORD _out) {;
}
